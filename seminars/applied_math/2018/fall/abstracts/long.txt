Professional scientific programmers strive to develop programs that are very efficient yet also robust, maintainable, easy to use, and easily applied to new problems and adapted to new algorithms. There are a number of general programming techniques that can help attain a combination of efficiency, safety, simplicity, and extensibility. Unfortunately, while techniques such as templating, inheritance, type traits, smart pointers, factory objects, and callback objects aren't difficult conceptually and are well-known among professional programmers, their uses aren't particularly obvious to beginning programmers. 
 In this series of talks I will describe how such methods were used to solve a number of programming challenges that arose during the development of a C++ program to simulate a class of problems in galaxy dynamics. The code was built using existing software libraries for solution of partial differential equations; even so, the efficient and extensible use of those libraries required a surprisingly wide selection of "evil programming tricks." Most of these techniques are not specific to C++, and can be used in other languages such as Python.  
